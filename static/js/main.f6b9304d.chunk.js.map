{"version":3,"sources":["components/Preview/index.tsx","components/Editor/index.tsx","components/Toolbar/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Preview","markdown","id","dangerouslySetInnerHTML","rawMarkup","marked","breaks","__html","dompurify","sanitize","getMarkdownText","Editor","onChange","value","Toolbar","text","onClick","icon","className","faFreeCodeCamp","App","useState","setMarkdown","isEditorMaximized","setEditorMaximized","isPreviewMaximized","setPreviewMaximized","join","faCompress","faArrowsAlt","prevState","event","currentTarget","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TAoBeA,EAX2B,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAMxC,OACI,yBAAKC,GAAG,UAAUC,wBANE,WACpB,IAAMC,EAAYC,IAAOJ,EAAU,CAAEK,QAAQ,IAC7C,MAAO,CAAEC,OAAQC,IAAUC,SAASL,IAIOM,MCCpCC,EARwB,SAAC,GAA0B,IAAzBV,EAAwB,EAAxBA,SAAUW,EAAc,EAAdA,SAC/C,OACI,8BAAUV,GAAG,SACHW,MAAOZ,EACPW,SAAUA,K,eCQbE,EAV0B,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,KACxD,OACE,yBAAKC,UAAU,WACb,kBAAC,IAAD,CAAiBD,KAAME,MACtBJ,EACD,kBAAC,IAAD,CAAiBC,QAASA,EAASC,KAAMA,M,OC+EhCG,MAxCf,WAAgB,IAAD,EACqBC,mBAjDnB,8qCAgDF,mBACJpB,EADI,KACMqB,EADN,OAEqCD,oBAAS,GAF9C,mBAEJE,EAFI,KAEeC,EAFf,OAGuCH,oBAAS,GAHhD,mBAGJI,EAHI,KAGgBC,EAHhB,KAiBX,OACI,6BACI,yBAAKR,UAAW,CAAC,aAAcK,EAAoB,YAAcE,GAAsB,QAAQE,KAAK,MAChG,kBAAC,EAAD,CACIV,KAAOM,GAAsBE,EAAmCG,IAAdC,IAClDb,QAba,WACzBQ,GAAoB,SAAAM,GAAS,OAAKA,MAatBf,KAAK,WACT,kBAAC,EAAD,CAAQd,SAAUA,EACVW,SApBC,SAACmB,GAClBT,EAAYS,EAAMC,cAAcnB,WAqB5B,yBAAKK,UAAU,cAEf,yBAAKA,UAAW,CAAC,cAAeK,EAAoB,OAASE,GAAsB,aAAaE,KAAK,MACjG,kBAAC,EAAD,CACIV,KAAOM,GAAsBE,EAAmCG,IAAdC,IAClDb,QAnBc,WAC1BU,GAAqB,SAAAI,GAAS,OAAKA,MAmBvBf,KAAK,cACT,kBAAC,EAAD,CAASd,SAAUA,OC7EfgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6b9304d.chunk.js","sourcesContent":["import React from 'react'\nimport marked from 'marked';\nimport dompurify from 'dompurify';\n\ninterface IPreviewProps {\n    /** The text inside the editor */\n    markdown: string\n}\n\nconst Preview : React.FC<IPreviewProps> = ({markdown}) => {\n    const getMarkdownText = () =>  {\n        const rawMarkup = marked(markdown, { breaks: true, });\n        return { __html: dompurify.sanitize(rawMarkup) };\n    };\n\n    return (\n        <div id='preview' dangerouslySetInnerHTML={getMarkdownText()} />\n    )\n}\n\nexport default Preview\n","import React from 'react'\n\ninterface IEditorProps {\n    /** The text inside the editor */\n    markdown: string,\n    /** The function to execute once text changes inside the textarea */\n    onChange: (event:React.ChangeEvent<HTMLTextAreaElement>) => void\n}\n\nconst Editor: React.FC<IEditorProps> = ({markdown, onChange}) => {\n    return (\n        <textarea id=\"editor\"\n                  value={markdown}\n                  onChange={onChange}/>\n    )\n}\n\nexport default Editor\n","import React from 'react';\nimport { faFreeCodeCamp } from \"@fortawesome/free-brands-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\n\ninterface IToolbarProps {\n    text: string,\n    onClick: () => void,\n    icon: IconProp,\n}\n\nconst Toolbar: React.FC<IToolbarProps> = ({text, onClick, icon}) => {\n  return (\n    <div className=\"toolbar\">\n      <FontAwesomeIcon icon={faFreeCodeCamp} />\n      {text}\n      <FontAwesomeIcon onClick={onClick} icon={icon} />\n    </div>\n  )\n}\n\nexport default Toolbar;","import React, {useState} from 'react';\nimport './App.scss';\nimport Preview from \"./components/Preview\";\nimport Editor from \"./components/Editor\";\nimport Toolbar from \"./components/Toolbar\";\nimport { faCompress, faArrowsAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst placeholder =\n    `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nfunction App() {\n    const [markdown, setMarkdown] = useState(placeholder);\n    const [isEditorMaximized, setEditorMaximized] = useState(false);\n    const [isPreviewMaximized, setPreviewMaximized] = useState(false);\n\n    const handleChange = (event:React.ChangeEvent<HTMLTextAreaElement>) => {\n        setMarkdown(event.currentTarget.value)\n    };\n\n    const handleEditorMaximize = () => {\n        setEditorMaximized((prevState => !prevState));\n    };\n\n    const handlePreviewMaximize = () => {\n        setPreviewMaximized((prevState => !prevState));\n    };\n\n    return (\n        <div>\n            <div className={['editorWrap', isEditorMaximized ? 'maximized' : isPreviewMaximized && 'hide'].join(' ')}>\n                <Toolbar\n                    icon={!isEditorMaximized && !isPreviewMaximized ? faArrowsAlt : faCompress }\n                    onClick={handleEditorMaximize}\n                    text=\"Editor\"/>\n                <Editor markdown={markdown}\n                        onChange={handleChange}/>\n            </div>\n            <div className=\"converter\">\n            </div>\n            <div className={['previewWrap', isEditorMaximized ? 'hide' : isPreviewMaximized && 'maximized'].join(' ')}>\n                <Toolbar\n                    icon={!isEditorMaximized && !isPreviewMaximized ? faArrowsAlt : faCompress }\n                    onClick={handlePreviewMaximize}\n                    text=\"Previewer\"/>\n                <Preview markdown={markdown}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}